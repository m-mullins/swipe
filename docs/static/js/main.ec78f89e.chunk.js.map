{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","Component","props","_this2","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fullStack","React","createRef","fetchingPosts","after","newPosts","POST_LIMIT","COMMENT_LIMIT","lastConfidence","fetchPosts","state","posts","length","console","log","concat","fetch","then","response","json","data","promises","children","map","cos","push","Promise","all","resolve","reject","permalink","val","catch","err","LIMIT","postData","parsePosts","post","id","toConsumableArray","setState","componentDidUpdate","newIds","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","current","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","element","stack","createCard","return","postList","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","page","comments","p","stickied","url","distinguished","thumbnail","title","isImage","match","imgUrl","num_comments","postComments","getComments","shuffle","comment","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","c","text","split","handleClick","postId","direction","i","correct","contra","ReactSwing","DIRECTION","LEFT","RIGHT","best","score","splice","dragEnd","el","target","attributes","style","textContent","lity","handleThrowEnd","throwDirection","commentIds","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_comment$data","body_html","body","indexOf","__html","htmlDecode","a","j","Math","floor","random","_ref","_this3","react_default","createElement","className","ref","paddingBottom","react_swing_default","setStack","throwout","bind","dragend","config","allowedDirections","throwOutConfidence","xOffset","yOffset","xConfidence","min","abs","offsetWidth","yConfidence","offsetHeight","max","key","data-lity-target","data-lity-desc","background","backgroundSize","display","flexDirection","justifyContent","color","position","bottom","dangerouslySetInnerHTML","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ec78f89e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactSwing  from 'react-swing';\nimport './App.css';\nimport htmlDecode from 'unescape';\nimport lity from 'lity';\n\nclass MyButton extends Component {\n\n  handleClick = () => {\n    this.props.onClick(this.props.id);\n  }\n\n  render = () => {\n    return (\n      <button className=\"btn btn-primary\" onClick={this.handleClick.bind(this)}>Remove</button>\n    )\n  }\n}\n\nclass App extends Component {\n  fullStack = React.createRef();\n  fetchingPosts = false;\n  after = null;\n  newPosts = []\n  POST_LIMIT = 5;\n  COMMENT_LIMIT = 20;\n  lastConfidence = 0;\n\n  constructor(props) {\n    super(props);\n    this.state  = {\n      posts: [],\n      stack: null,\n      best: 0,\n      score: 0\n    };\n  }\n\n  fetchPosts = () => {\n    if (this.state.posts.length > 10 || this.fetchingPosts) {\n      return;\n    }\n\n    this.fetchingPosts = true;\n    console.log('https://www.reddit.com/.json?limit='\n        +this.POST_LIMIT+(this.after !== null ? `&after=${this.after}` : ''));\n    fetch('https://www.reddit.com/.json?limit='\n        +this.POST_LIMIT+(this.after !== null ? `&after=${this.after}` : ''))\n      .then(response => response.json())\n      .then(data => {\n        var promises = [];\n        this.after = data.data.after;\n        data.data.children && data.data.children.map(cos =>\n          promises.push(Promise.all([\n            new Promise((resolve, reject) => { \n              fetch('https://www.reddit.com/'+cos.data.permalink+'/.json?sort=controversial&limit='+this.COMMENT_LIMIT)\n                .then(response => response.json())\n                .then(val => resolve(val))\n                .catch(err => reject(err))\n            }),\n            new Promise((resolve, reject) => { \n              fetch('https://www.reddit.com/'+cos.data.permalink+'/.json?limit='+this.LIMIT)\n                .then(response => response.json())\n                .then(val => resolve(val))\n                .catch(err => reject(err))\n            }),\n          ]))\n        );\n\n        Promise.all(promises).then((postData) => {\n          let posts = this.parsePosts(postData);\n          this.newPosts = this.newPosts.concat(posts.map((post)=>post.id));\n          posts = [ ...posts, ...this.state.posts ];\n          this.setState({posts});\n          this.fetchingPosts = false;\n          this.fetchPosts();\n        });\n      })\n      .catch(err => console.log(err));\n  }\n  \n  componentDidUpdate = () => {\n    console.log(this.newPosts);\n    let newIds = [...this.newPosts];\n    this.newPosts = [];\n    for (let id of newIds) {\n      const children = [...this.fullStack.current.children[1].children]; //create a copy before running getCard\n      for (let element of children) {\n        if (element.id === id) {\n          console.log('Stackifying element ' + id);\n          this.state.stack.createCard(element, true);\n        }\n      }\n    }\n}\n\n  parsePosts = (postList) => {\n    if (!postList) { return [] }\n    let posts = [];\n    for (let page of postList) {\n      let post = {};\n      let comments = [];\n\n      let p = page[0]; //contraversial comments\n      console.log(p);\n\n      if (p && p[0] && p[0].data && p[0].data.children[0]) {\n        const postData = p[0].data.children[0].data;\n        const { stickied, id, url, distinguished, thumbnail, title } = postData;\n        const isImage = url.match(/\\.(jpeg|png|gif|jpg)$/) != null;\n\n        if (stickied || distinguished === 'moderator' ||\n          !isImage || thumbnail === 'self') {\n            continue;\n        }\n\n        post.title = title;\n        post.id = id;\n        post.imgUrl = url;\n        post.num_comments = postData.num_comments;\n      }\n\n      if (p && p[1] && p[1].data && p[1].data.children) {\n        let postComments = p[1].data.children;\n        comments = this.getComments(postComments, true);\n      }\n\n      p = page[1];\n      if (p && p[1] && p[1].data && p[1].data.children) {\n        let postComments = p[1].data.children;\n        comments = comments.concat(this.getComments(postComments));\n      }\n\n      if (comments.length <= 0) {\n        continue;\n      }\n\n      comments = this.shuffle(comments);\n      post.comment = null;\n      for (let c of comments) {\n        if (c.text && c.text.split(' ').length <= 14) {\n          post.comment = c;\n          break;\n        }\n      }\n\n      if (post.comment === null) {\n        continue;\n      }\n\n      posts.push(post);\n    }\n    return posts; //posts.reverse();\n  }\n\n  componentDidMount() {\n    this.fetchPosts();\n  }\n\n  handleClick = (postId, direction) => {\n    var { posts } = this.state;\n    if (posts.length <= 0) { return; }\n\n    for (let i = posts.length - 1; i >= 0; --i) {\n      if (posts[i].id === postId) {\n        let correct = ((posts[i].comment.contra && direction === ReactSwing.DIRECTION.LEFT) ||\n            (!posts[i].comment.contra && direction === ReactSwing.DIRECTION.RIGHT ));\n        console.log('direction', direction);\n        console.log('left', direction === ReactSwing.DIRECTION.LEFT);\n        console.log('right', direction === ReactSwing.DIRECTION.RIGHT);\n\n        let best = this.state.best;\n        let score = this.state.score;\n\n        if (correct) {\n          score += 1;\n        } else {\n          if ( score > best  ) {\n            best = score;\n          }\n          score = 0;\n        }\n\n        this.setState({best,score});\n\n        posts.splice(i,1);\n      }\n    }\n\n    this.setState({posts});\n  }\n\n  dragEnd = (el) => {\n    console.log(el);\n    if (!this.lastConfidence)\n    {\n      if (el.target && el.target.attributes && el.target.attributes.style) {\n        let style = el.target.attributes.style.textContent;\n        let url = style.match(/url\\([\"']([^\"']+)/);\n        if (url && url.length > 1) {\n          lity(url[1],{},el.target);\n        }\n      }\n    }\n\n  }\n\n  handleThrowEnd = (el) => {\n      console.log('elelelele',el);\n      this.handleClick(el.target.id,el.throwDirection);\n      this.fetchPosts();\n  }\n  \n  getComments = (postComments, contra) => {\n    let commentIds = [];\n    let comments = [];\n    for (let comment of postComments) {\n      const { stickied, body_html, body, id } = comment.data;\n      if (stickied) { continue; }\n      if (commentIds.indexOf(id) >= 0) { continue; }\n      commentIds.push(id);\n      comments.push({ text: body, __html: htmlDecode(body_html), contra: contra});\n    }\n\n    return comments;\n  }\n\n  shuffle = (a) => {\n    for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n          <div ref={this.fullStack} id=\"viewport\">\n              <p style={{paddingBottom: '3px'}}>Best: {this.state.best} Score: {this.state.score}</p>\n              <ReactSwing\n                className=\"stack\"\n                setStack={stack => this.setState({ stack: stack })}\n                throwout={this.handleThrowEnd.bind(this)}\n                dragend={this.dragEnd.bind(this)}\n                config={{\n                  allowedDirections: [ReactSwing.DIRECTION.LEFT, ReactSwing.DIRECTION.RIGHT],\n                  throwOutConfidence: (xOffset, yOffset, element) => {\n                    const xConfidence = Math.min(Math.abs(xOffset) / element.offsetWidth / 0.5, 1);\n                    const yConfidence = Math.min(Math.abs(yOffset) / element.offsetHeight, 1);\n                \n                    this.lastConfidence = Math.max(xConfidence, yConfidence);\n                    return this.lastConfidence;\n                  }\n                }}\n\n              >\n            {this.state.posts && this.state.posts.map((post) => {\n              //'linear-gradient(to bottom,hsla(0, 0%, 0%, 0) 0%,hsla(0, 0%, 0%, 0.009) 18.3%,hsla(0, 0%, 0%, 0.036) 33.5%,hsla(0, 0%, 0%, 0.077) 45.8%,hsla(0, 0%, 0%, 0.13) 55.7%,hsla(0, 0%, 0%, 0.194) 63.5%,hsla(0, 0%, 0%, 0.264) 69.5%,hsla(0, 0%, 0%, 0.34) 74%,hsla(0, 0%, 0%, 0.418) 77.5%,hsla(0, 0%, 0%, 0.497) 80.2%,hsla(0, 0%, 0%, 0.574) 82.5%,hsla(0, 0%, 0%, 0.646) 84.8%,hsla(0, 0%, 0%, 0.711) 87.3%,hsla(0, 0%, 0%, 0.766) 90.4%,hsla(0, 0%, 0%, 0.81) 94.6%,hsla(0, 0%, 0%, 0.84) 100%),' +\n              //'linear-gradient(to top,hsla(0, 0%, 0%, 0) 0%,hsla(0, 0%, 0%, 0.009) 18.3%,hsla(0, 0%, 0%, 0.036) 33.5%,hsla(0, 0%, 0%, 0.077) 45.8%,hsla(0, 0%, 0%, 0.13) 55.7%,hsla(0, 0%, 0%, 0.194) 63.5%,hsla(0, 0%, 0%, 0.264) 69.5%,hsla(0, 0%, 0%, 0.34) 74%,hsla(0, 0%, 0%, 0.418) 77.5%,hsla(0, 0%, 0%, 0.497) 80.2%,hsla(0, 0%, 0%, 0.574) 82.5%,hsla(0, 0%, 0%, 0.646) 84.8%,hsla(0, 0%, 0%, 0.711) 87.3%,hsla(0, 0%, 0%, 0.766) 90.4%,hsla(0, 0%, 0%, 0.81) 94.6%,hsla(0, 0%, 0%, 0.84) 100%),' +\n              return (\n                  <div className=\"card\" id={post.id} key={`render-${post.id}`}\n                    data-lity-target={post.imgUrl}\n                    data-lity-desc={'\" data-lity-close junk=\"'}\n                    style={{\n                      background:\n                          'linear-gradient(to bottom,hsla(0, 0%, 0%, 0) 0%,hsla(0, 0%, 0%, 0.004) 18.7%,hsla(0, 0%, 0%, 0.015) 34.9%,hsla(0, 0%, 0%, 0.034) 48.7%,hsla(0, 0%, 0%, 0.06) 60.4%,hsla(0, 0%, 0%, 0.094) 70.1%,hsla(0, 0%, 0%, 0.135) 78.1%,hsla(0, 0%, 0%, 0.184) 84.5%,hsla(0, 0%, 0%, 0.241) 89.4%,hsla(0, 0%, 0%, 0.305) 93.2%,hsla(0, 0%, 0%, 0.377) 95.9%,hsla(0, 0%, 0%, 0.456) 97.7%,hsla(0, 0%, 0%, 0.543) 98.8%,hsla(0, 0%, 0%, 0.638) 99.5%,hsla(0, 0%, 0%, 0.74) 99.8%,hsla(0, 0%, 0%, 0.85) 100%),' +\n                          'linear-gradient(to top,hsla(0, 0%, 0%, 0) 0%,hsla(0, 0%, 0%, 0.004) 18.7%,hsla(0, 0%, 0%, 0.015) 34.9%,hsla(0, 0%, 0%, 0.034) 48.7%,hsla(0, 0%, 0%, 0.06) 60.4%,hsla(0, 0%, 0%, 0.094) 70.1%,hsla(0, 0%, 0%, 0.135) 78.1%,hsla(0, 0%, 0%, 0.184) 84.5%,hsla(0, 0%, 0%, 0.241) 89.4%,hsla(0, 0%, 0%, 0.305) 93.2%,hsla(0, 0%, 0%, 0.377) 95.9%,hsla(0, 0%, 0%, 0.456) 97.7%,hsla(0, 0%, 0%, 0.543) 98.8%,hsla(0, 0%, 0%, 0.638) 99.5%,hsla(0, 0%, 0%, 0.74) 99.8%,hsla(0, 0%, 0%, 0.85) 100%),' +\n                          'url(\"' + post.imgUrl + '\") no-repeat center center',\n                      backgroundSize: 'cover',\n                      display: 'flex',\n                      flexDirection: 'column',\n                      justifyContent: 'space-between',\n                    }}\n                  >\n                    <div>\n                      <p style={{ color: 'white' }}>{post.title}</p>\n                    </div>\n                    <div style={{ position: 'absoulte', bottom: '0' }}>\n                      <p style={{ color: '#fff' }}>{post.num_comments}</p>\n                      <div dangerouslySetInnerHTML={post.comment} className=\"top\"></div>\n                    </div>\n                  </div>\n              );\n            })}\n          </ReactSwing>\n        </div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}