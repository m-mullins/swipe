{"version":3,"sources":["reddit.js","Card.js","Stack.js","App.js","serviceWorker.js","index.js"],"names":["debug","require","after","running","parsePosts","postList","posts","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","p","value","post","_p$data","data","stickied","subreddit","num_comments","id","url","distinguished","thumbnail","title","isImage","match","key","imgUrl","push","err","return","fetchPosts","Promise","resolve","reject","concat","fetch","then","response","json","children","Card","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onLoad","setState","loaded","componentDidUpdate","element","cardRef","current","stack","state","stackified","createCard","React","createRef","item","react_default","a","createElement","ref","className","style","display","alt","data-lity-target","data-lity-desc","bind","src","width","height","objectFit","backgroundColor","flexDirection","justifyContent","Component","Stack","fetchMore","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","length","cardLoaded","catch","componentDidMount","cards","toConsumableArray","shift","handleThrowEnd","el","target","i","splice","MIN_POSTS","dragEnd","lastConfidence","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","attributes","attr","localName","lity","textContent","_this2","Fragment","react_swing_default","setStack","throwout","dragend","config","allowedDirections","ReactSwing","DIRECTION","LEFT","RIGHT","throwOutConfidence","xOffset","yOffset","xConfidence","Math","min","abs","offsetWidth","yConfidence","offsetHeight","max","alignItems","map","src_Card","react_loader_spinner_default","type","color","App","src_Stack","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a555429c.chunk.js","sourcesContent":["const debug = require('debug')('swipe-dog:reddit');\n\nvar after = '';\nvar POST_LIMIT = 5;\nvar running = false;\n \nvar fetchPosts = () => {\n  if (running) {\n    return new Promise((resolve,reject) => reject(\"currently running\"));\n  }\n  running = true;\n\n  debug('fetch','https://www.reddit.com/r/dogswithjobs+rarepuppers/.json?limit='\n    + POST_LIMIT + `&after=${after}`);\n\n  return fetch('https://www.reddit.com/r/dogswithjobs+rarepuppers/.json?limit='\n    + POST_LIMIT + `&after=${after}`)\n    .then(response => response.json())\n    .then(data => {\n      after = data.data.after;\n      running = false;\n      if (data.data.children) {\n        return parsePosts(data.data.children);\n      }\n      return []\n    });\n}\n\nvar parsePosts = (postList) => {\n  let posts = [];\n\n  for (let p of postList) {\n    let post = {};\n    const { stickied, subreddit, num_comments, id, url, distinguished, thumbnail, title } = p.data;\n    const isImage = url.match(/\\.(jpeg|png|gif|jpg)$/) != null;\n\n    if (stickied || distinguished === 'moderator' ||\n      !isImage || thumbnail === 'self') {\n        continue;\n    }\n    \n    post.title = title;\n    post.id = id;\n    post.key = id;\n    post.imgUrl = url;\n    post.thumbnail = thumbnail;\n    post.num_comments = num_comments;\n    post.subreddit = subreddit;\n\n    posts.push(post);\n  }\n\n  return posts;\n};\n\nexport default fetchPosts;","import React, { Component } from 'react';\nimport './App.css';\nconst debug = require('debug')('swipe-dog:Card');\n\nclass Card extends Component {\n  constructor(props) {\n    super(props);\n\n    this.cardRef = React.createRef();\n\n    this.stackified = false;\n\n    this.state = {\n      loaded: false\n    }\n  }\n\n  onLoad = () => {\n    this.setState({loaded: true});\n    this.props.loaded();\n    //stackify the reference?\n  }\n\n  componentDidUpdate = () => {\n    let element = this.cardRef.current;\n\n    if (element && element.id && this.props.stack && this.state.loaded && !this.stackified) {\n      debug('stackifying element ' + element.id);\n      this.props.stack.createCard(element, true);\n      this.stackified = true;\n    }\n  }\n\n  render() {\n    const { item } = this.props;\n\n    return (\n      <div ref={this.cardRef} className=\"card\" id={item.key} key={item.key}\n        style={{\n              display: this.state.loaded ? 'unset' : 'none',\n        }}\n      >\n        <img\n          alt={item.title}\n          data-lity-target={item.imgUrl}\n          data-lity-desc={'\" data-lity-close junk=\"'}\n          onLoad={this.onLoad.bind(this)}\n          src={item.imgUrl}\n          style={{\n            width: '100%',\n            height: '100%',\n            objectFit: 'cover',\n            backgroundColor: 'gray',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'space-between',\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Card;","import React, { Component } from 'react';\nimport ReactSwing  from 'react-swing';\nimport './App.css';\nimport lity from 'lity';\nimport fetchPosts from './reddit';\nimport Loader from 'react-loader-spinner';\nimport Card from './Card';\nconst debug = require('debug')('swipe-dog:Stack');\n\nclass Stack extends Component {\n  static MIN_POSTS = 3;\n\n  constructor(props) {\n    super(props);\n\n    this.posts = [];\n    this.lastConfidence = 1;\n\n    this.state = {\n      cards: [],\n      stack: null\n    }\n  }\n\n  fetchMore = () => {\n    fetchPosts().then((posts) => {\n      for (let p of posts) {\n        for (let exist of this.posts) {\n          if (exist.key === p.key) {\n            continue;\n          }\n        }\n\n        this.posts.push(p);\n      }\n\n      if (this.posts.length <= 0) {\n        fetchPosts();\n      }\n\n      this.cardLoaded();\n    }).catch((err) => { debug('assuming already running request', err) });\n  }\n\n  componentDidMount = () => {\n    this.fetchMore();\n  }\n\n  cardLoaded = () => {\n    if (this.posts.length > 0) {\n      this.setState({\n        cards: [...this.state.cards, this.posts.shift()]\n      });\n    }\n  }\n\n  handleThrowEnd = (el) => {\n    let id = el.target.id;\n\n    var { cards } = this.state;\n    if (cards.length <= 0) { return; }\n\n\n    for (let i = 0; i < cards.length; ++i) {\n      if(cards[i].id === id) {\n        debug('removing', id);\n        cards.splice(i,1);\n        break;\n      }\n    }\n    this.setState({ cards });\n\n    if (cards.length < Stack.MIN_POSTS) {\n      debug(\"fetching more posts\");\n      this.fetchMore();\n    }\n  }\n\n  dragEnd = (el) => {\n\n    if (!this.lastConfidence)\n    {\n      let children = el.target.children;\n      if (children.length <= 0) {\n        return;\n      }\n\n      let target = el.target.children[0];\n      for (let attr of target.attributes) {\n        if (attr.localName === \"data-lity-target\") {\n          debug('calling lity on ',el.target.id);\n          lity(attr.textContent,{},target);\n        }\n      }\n    }\n  }\n\n  render() {\n    return <>\n      <ReactSwing\n        style={{ display: 'none' }}\n        setStack={stack => this.setState({ stack: stack })}\n        throwout={this.handleThrowEnd.bind(this)}\n        dragend={this.dragEnd.bind(this)}\n        config={{\n          allowedDirections: [ReactSwing.DIRECTION.LEFT, ReactSwing.DIRECTION.RIGHT],\n          throwOutConfidence: (xOffset, yOffset, element) => {\n            const xConfidence = Math.min(Math.abs(xOffset) / element.offsetWidth / 0.5, 1);\n            const yConfidence = Math.min(Math.abs(yOffset) / element.offsetHeight, 1);\n\n            this.lastConfidence = Math.max(xConfidence, yConfidence);\n            return this.lastConfidence;\n          }\n        }}\n      >\n        <div style={{ display: 'none' }}></div>\n      </ReactSwing>\n\n      <div className=\"stack\" style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n      }}>\n        {this.state.cards && this.state.cards.length > 0 ?\n          this.state.cards.map((item) => {\n            return <Card stack={this.state.stack} key={item.key} loaded={this.cardLoaded.bind(this)} item={item} />\n          })\n          :\n          <Loader\n            type=\"Oval\"\n            color=\"#00BFFF\"\n            height=\"80\"\n            width=\"80\"\n          />\n        }\n      </div>\n    </>;\n  }\n}\n\nexport default Stack;","import React from 'react';\nimport Stack from './Stack';\nimport './App.css';\n\nif (process.env.NODE_ENV !== 'production') {\n  localStorage.setItem('debug', 'swipe-dog:*');\n}\n\nfunction App(props) {\n    return (\n        <div className=\"App\">\n          <div id=\"viewport\">\n            <div style={{display: 'contents'}}>\n              <Stack />\n            </div>\n          </div>\n        </div>\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}