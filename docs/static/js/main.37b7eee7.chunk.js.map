{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","Component","props","_this2","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fullStack","React","createRef","fetchingPosts","after","newPosts","POST_LIMIT","COMMENT_LIMIT","lastConfidence","requestId","fetchPosts","state","posts","length","console","log","concat","fetch","then","response","json","data","promises","children","map","cos","push","Promise","all","resolve","reject","permalink","val","catch","err","LIMIT","postData","parsePosts","post","id","toConsumableArray","setState","componentDidUpdate","newIds","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","current","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","element","stack","createCard","return","postList","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","page","comments","p","stickied","url","distinguished","thumbnail","title","isImage","match","key","imgUrl","num_comments","subreddit","postComments","getComments","shuffle","comment","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","c","text","split","handleClick","postId","direction","i","correct","contra","ReactSwing","DIRECTION","LEFT","RIGHT","best","score","splice","dragEnd","el","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","target","attributes","attr","localName","lity","textContent","handleThrowEnd","throwDirection","commentIds","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_comment$data","body_html","body","indexOf","__html","htmlDecode","a","j","Math","floor","random","_ref","_this3","react_default","createElement","className","ref","style","paddingBottom","react_swing_default","setStack","throwout","bind","dragend","config","allowedDirections","throwOutConfidence","xOffset","yOffset","xConfidence","min","abs","offsetWidth","yConfidence","offsetHeight","max","data-lity-target","data-lity-desc","backgroundColor","background","backgroundSize","display","flexDirection","justifyContent","marginLeft","marginRight","color","textShadow","position","bottom","marginRIght","dangerouslySetInnerHTML","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.37b7eee7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactSwing  from 'react-swing';\nimport './App.css';\nimport htmlDecode from 'unescape';\nimport lity from 'lity';\n\nclass MyButton extends Component {\n\n  handleClick = () => {\n    this.props.onClick(this.props.id);\n  }\n\n  render = () => {\n    return (\n      <button className=\"btn btn-primary\" onClick={this.handleClick.bind(this)}>Remove</button>\n    )\n  }\n}\n\nclass App extends Component {\n  fullStack = React.createRef();\n  fetchingPosts = false;\n  after = null;\n  newPosts = []\n  POST_LIMIT = 5;\n  COMMENT_LIMIT = 20;\n  lastConfidence = 0;\n  requestId = 0;\n\n  constructor(props) {\n    super(props);\n    this.state  = {\n      posts: [],\n      stack: null,\n      best: 0,\n      score: 0\n    };\n  }\n\n  fetchPosts = () => {\n    if (this.state.posts.length > 10 || this.fetchingPosts) {\n      return;\n    }\n    this.requestId++;\n\n    this.fetchingPosts = true;\n    console.log('https://www.reddit.com/.json?limit='\n        +this.POST_LIMIT+(this.after !== null ? `&after=${this.after}` : ''));\n    fetch('https://www.reddit.com/.json?limit='\n        +this.POST_LIMIT+(this.after !== null ? `&after=${this.after}` : ''))\n      .then(response => response.json())\n      .then(data => {\n        var promises = [];\n        this.after = data.data.after;\n        data.data.children && data.data.children.map(cos =>\n          promises.push(Promise.all([\n            new Promise((resolve, reject) => { \n              fetch('https://www.reddit.com/'+cos.data.permalink+'/.json?sort=controversial&limit='+this.COMMENT_LIMIT)\n                .then(response => response.json())\n                .then(val => resolve(val))\n                .catch(err => reject(err))\n            }),\n            new Promise((resolve, reject) => { \n              fetch('https://www.reddit.com/'+cos.data.permalink+'/.json?limit='+this.LIMIT)\n                .then(response => response.json())\n                .then(val => resolve(val))\n                .catch(err => reject(err))\n            }),\n          ]))\n        );\n\n        Promise.all(promises).then((postData) => {\n          let posts = this.parsePosts(postData);\n          this.newPosts = this.newPosts.concat(posts.map((post)=>post.id));\n          posts = [ ...posts, ...this.state.posts ];\n          this.setState({posts});\n          this.fetchingPosts = false;\n          this.fetchPosts();\n        });\n      })\n      .catch(err => console.log(err));\n  }\n  \n  componentDidUpdate = () => {\n    console.log(this.newPosts);\n    let newIds = [...this.newPosts];\n    this.newPosts = [];\n    for (let id of newIds) {\n      const children = [...this.fullStack.current.children[1].children]; //create a copy before running getCard\n      for (let element of children) {\n        if (element.id === id) {\n          console.log('Stackifying element ' + id);\n          this.state.stack.createCard(element, true);\n        }\n      }\n    }\n}\n\n  parsePosts = (postList) => {\n    if (!postList) { return [] }\n    let posts = [];\n    for (let page of postList) {\n      let post = {};\n      let comments = [];\n\n      let p = page[0]; //contraversial comments\n      console.log(p);\n\n      if (p && p[0] && p[0].data && p[0].data.children[0]) {\n        const postData = p[0].data.children[0].data;\n        const { stickied, id, url, distinguished, thumbnail, title } = postData;\n        const isImage = url.match(/\\.(jpeg|png|gif|jpg)$/) != null;\n\n        if (stickied || distinguished === 'moderator' ||\n          !isImage || thumbnail === 'self') {\n            continue;\n        }\n\n        post.title = title;\n        post.id = id;\n        post.key = `render-${id}-${this.requestId}`;\n        post.imgUrl = url;\n        post.thumbnail = thumbnail;\n        post.num_comments = postData.num_comments;\n        post.subreddit = postData.subreddit;\n      }\n\n      if (p && p[1] && p[1].data && p[1].data.children) {\n        let postComments = p[1].data.children;\n        comments = this.getComments(postComments, true);\n      }\n\n      p = page[1];\n      if (p && p[1] && p[1].data && p[1].data.children) {\n        let postComments = p[1].data.children;\n        comments = comments.concat(this.getComments(postComments));\n      }\n\n      if (comments.length <= 0) {\n        continue;\n      }\n\n      comments = this.shuffle(comments);\n      post.comment = null;\n      for (let c of comments) {\n        if (c.text && c.text.split(' ').length <= 14) {\n          post.comment = c;\n          break;\n        }\n      }\n\n      if (post.comment === null) {\n        continue;\n      }\n\n      posts.push(post);\n    }\n    return posts; //posts.reverse();\n  }\n\n  componentDidMount() {\n    this.fetchPosts();\n  }\n\n  handleClick = (postId, direction) => {\n    var { posts } = this.state;\n    if (posts.length <= 0) { return; }\n\n    for (let i = posts.length - 1; i >= 0; --i) {\n      if (posts[i].id === postId) {\n        let correct = ((posts[i].comment.contra && direction === ReactSwing.DIRECTION.LEFT) ||\n            (!posts[i].comment.contra && direction === ReactSwing.DIRECTION.RIGHT ));\n        console.log('direction', direction);\n        console.log('left', direction === ReactSwing.DIRECTION.LEFT);\n        console.log('right', direction === ReactSwing.DIRECTION.RIGHT);\n\n        let best = this.state.best;\n        let score = this.state.score;\n\n        if (correct) {\n          score += 1;\n        } else {\n          if ( score > best  ) {\n            best = score;\n          }\n          score = 0;\n        }\n\n        this.setState({best,score});\n\n        posts.splice(i,1);\n      }\n    }\n\n    this.setState({posts});\n  }\n\n  dragEnd = (el) => {\n    console.log(el);\n    if (!this.lastConfidence)\n    {\n      for (let attr of el.target.attributes) {\n        if (attr.localName === \"data-lity-target\") {\n          lity(attr.textContent,{},el.target);\n        }\n      }\n      //if (el.target && el.target.attributes && el.target.attributes.style) {\n      //  let style = el.target.attributes.style.textContent;\n      //  let url = style.match(/url\\([\"']([^\"']+)/);\n      //  if (url && url.length > 1) {\n      //    lity(url[1],{},el.target);\n      //  }\n      //}\n    }\n\n  }\n\n  handleThrowEnd = (el) => {\n      console.log('elelelele',el);\n      this.handleClick(el.target.id,el.throwDirection);\n      this.fetchPosts();\n  }\n  \n  getComments = (postComments, contra) => {\n    let commentIds = [];\n    let comments = [];\n    for (let comment of postComments) {\n      const { stickied, body_html, body, id } = comment.data;\n      if (stickied) { continue; }\n      if (commentIds.indexOf(id) >= 0) { continue; }\n      commentIds.push(id);\n      comments.push({ text: body, __html: htmlDecode(body_html), contra: contra});\n    }\n\n    return comments;\n  }\n\n  shuffle = (a) => {\n    for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n          <div ref={this.fullStack} id=\"viewport\">\n              <p style={{paddingBottom: '3px'}}>Best: {this.state.best} Score: {this.state.score}</p>\n              <ReactSwing\n                className=\"stack\"\n                setStack={stack => this.setState({ stack: stack })}\n                throwout={this.handleThrowEnd.bind(this)}\n                dragend={this.dragEnd.bind(this)}\n                config={{\n                  allowedDirections: [ReactSwing.DIRECTION.LEFT, ReactSwing.DIRECTION.RIGHT],\n                  throwOutConfidence: (xOffset, yOffset, element) => {\n                    const xConfidence = Math.min(Math.abs(xOffset) / element.offsetWidth / 0.5, 1);\n                    const yConfidence = Math.min(Math.abs(yOffset) / element.offsetHeight, 1);\n                \n                    this.lastConfidence = Math.max(xConfidence, yConfidence);\n                    return this.lastConfidence;\n                  }\n                }}\n\n              >\n {this.state.posts && this.state.posts.map((post) => {\n              //'linear-gradient(to bottom,hsla(0, 0%, 0%, 0) 0%,hsla(0, 0%, 0%, 0.009) 18.3%,hsla(0, 0%, 0%, 0.036) 33.5%,hsla(0, 0%, 0%, 0.077) 45.8%,hsla(0, 0%, 0%, 0.13) 55.7%,hsla(0, 0%, 0%, 0.194) 63.5%,hsla(0, 0%, 0%, 0.264) 69.5%,hsla(0, 0%, 0%, 0.34) 74%,hsla(0, 0%, 0%, 0.418) 77.5%,hsla(0, 0%, 0%, 0.497) 80.2%,hsla(0, 0%, 0%, 0.574) 82.5%,hsla(0, 0%, 0%, 0.646) 84.8%,hsla(0, 0%, 0%, 0.711) 87.3%,hsla(0, 0%, 0%, 0.766) 90.4%,hsla(0, 0%, 0%, 0.81) 94.6%,hsla(0, 0%, 0%, 0.84) 100%),' +\n              //'linear-gradient(to top,hsla(0, 0%, 0%, 0) 0%,hsla(0, 0%, 0%, 0.009) 18.3%,hsla(0, 0%, 0%, 0.036) 33.5%,hsla(0, 0%, 0%, 0.077) 45.8%,hsla(0, 0%, 0%, 0.13) 55.7%,hsla(0, 0%, 0%, 0.194) 63.5%,hsla(0, 0%, 0%, 0.264) 69.5%,hsla(0, 0%, 0%, 0.34) 74%,hsla(0, 0%, 0%, 0.418) 77.5%,hsla(0, 0%, 0%, 0.497) 80.2%,hsla(0, 0%, 0%, 0.574) 82.5%,hsla(0, 0%, 0%, 0.646) 84.8%,hsla(0, 0%, 0%, 0.711) 87.3%,hsla(0, 0%, 0%, 0.766) 90.4%,hsla(0, 0%, 0%, 0.81) 94.6%,hsla(0, 0%, 0%, 0.84) 100%),' +\n              //'linear-gradient(to bottom,hsla(0, 0%, 0%, 0) 0%,hsla(0, 0%, 0%, 0.004) 18.7%,hsla(0, 0%, 0%, 0.015) 34.9%,hsla(0, 0%, 0%, 0.034) 48.7%,hsla(0, 0%, 0%, 0.06) 60.4%,hsla(0, 0%, 0%, 0.094) 70.1%,hsla(0, 0%, 0%, 0.135) 78.1%,hsla(0, 0%, 0%, 0.184) 84.5%,hsla(0, 0%, 0%, 0.241) 89.4%,hsla(0, 0%, 0%, 0.305) 93.2%,hsla(0, 0%, 0%, 0.377) 95.9%,hsla(0, 0%, 0%, 0.456) 97.7%,hsla(0, 0%, 0%, 0.543) 98.8%,hsla(0, 0%, 0%, 0.638) 99.5%,hsla(0, 0%, 0%, 0.74) 99.8%,hsla(0, 0%, 0%, 0.85) 100%),' +\n              //'linear-gradient(to top,hsla(0, 0%, 0%, 0) 0%,hsla(0, 0%, 0%, 0.004) 18.7%,hsla(0, 0%, 0%, 0.015) 34.9%,hsla(0, 0%, 0%, 0.034) 48.7%,hsla(0, 0%, 0%, 0.06) 60.4%,hsla(0, 0%, 0%, 0.094) 70.1%,hsla(0, 0%, 0%, 0.135) 78.1%,hsla(0, 0%, 0%, 0.184) 84.5%,hsla(0, 0%, 0%, 0.241) 89.4%,hsla(0, 0%, 0%, 0.305) 93.2%,hsla(0, 0%, 0%, 0.377) 95.9%,hsla(0, 0%, 0%, 0.456) 97.7%,hsla(0, 0%, 0%, 0.543) 98.8%,hsla(0, 0%, 0%, 0.638) 99.5%,hsla(0, 0%, 0%, 0.74) 99.8%,hsla(0, 0%, 0%, 0.85) 100%),' +\n\n              return (\n                  <div className=\"card\" id={post.id} key={post.key}\n                    data-lity-target={post.imgUrl}\n                    data-lity-desc={'\" data-lity-close junk=\"'}\n                    style={{\n                      backgroundColor: 'gray',\n                      background:\n                          'url(\"' + post.imgUrl + '\") no-repeat center center',\n                      backgroundSize: 'cover',\n                      display: 'flex',\n                      flexDirection: 'column',\n                      justifyContent: 'space-between',\n                    }}\n                  >\n                    <div style={{marginLeft: '10px', marginRight: '10px' }}>\n                      <p style={{ color: 'white', textShadow: '1px 1px 2px #000' }}>{post.title}</p>\n                    </div>\n                    <div style={{ position: 'absoulte', bottom: '0', marginLeft: '10px', marginRIght: '10px' }}>\n                      <p style={{ color: '#fff', textShadow: '1px 1px 2px #000' }}>🗨 {post.num_comments} • /r/{post.subreddit}</p>\n                      <div dangerouslySetInnerHTML={post.comment} className=\"top\"></div>\n                    </div>\n                  </div>\n              );\n            })}\n\n\n          \n          </ReactSwing>\n        </div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n\n/*\n            */","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}